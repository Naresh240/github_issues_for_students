aws logs filter-log-events --log-group-name "/ucc/eks/dm-campaign-process-manager/dev" --filter-pattern "INFO" --limit 20

aws logs put-metric-filter --log-group-name "/ucc/eks/dm-campaign-process-manager/dev" --filter-name "InfoLogFilter" --filter-pattern "INFO" --metric-transformations "metricName=InfoLogCount,metricNamespace=UccDmApp,metricValue=1"

aws logs describe-metric-filters --log-group-name "/ucc/eks/dm-campaign-process-manager/dev"

aws cloudwatch put-metric-alarm --alarm-name "InfoLogAlarm" --alarm-description "Alarm when INFO logs appear in dm-campaign-process-manager" --metric-name "InfoLogCount" --namespace "UccDmApp" --statistic Sum --period 60 --threshold 0 --comparison-operator GreaterThanThreshold --evaluation-periods 1 --treat-missing-data notBreaching --alarm-actions test-sns-topic


def get_consolidate_log_events(log_group_name, events):
    try:
        first_event = json.loads(events[0]['message'])
        ts_first_event_obj = datetime.strptime(first_event['ts'], '%Y-%m-%dT%H:%M:%S.%f%z')
    except (json.JSONDecodeError, KeyError):
        # fallback: use event timestamp if not JSON
        ts_first_event_obj = datetime.fromtimestamp(events[0]['timestamp'] / 1000.0)

    try:
        last_event = json.loads(events[-1]['message'])
        ts_last_event_obj = datetime.strptime(last_event['ts'], '%Y-%m-%dT%H:%M:%S.%f%z')
    except (json.JSONDecodeError, KeyError):
        ts_last_event_obj = datetime.fromtimestamp(events[-1]['timestamp'] / 1000.0)

    unique_log_streams = list(set([e['logStreamName'] for e in events]))

    params = {
        'logGroupName': log_group_name,
        'logStreamNames': unique_log_streams,
        'startTime': int(ts_first_event_obj.timestamp() * 1000),
        'endTime': int(ts_last_event_obj.timestamp() * 1000)
    }

    consolidated_log_events = []
    counter = 0
    while True:
        response = cloudwatch_logs.filter_log_events(**params)
        counter += 1
        consolidated_log_events.extend(response['events'])

        next_token = response.get('nextToken')
        if not next_token or counter > 10:  # safety guard
            break
        params['nextToken'] = next_token

    return consolidated_log_events
