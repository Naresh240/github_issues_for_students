aws logs filter-log-events --log-group-name "/ucc/eks/dm-campaign-process-manager/dev" --filter-pattern "INFO" --limit 20

aws logs put-metric-filter --log-group-name "/ucc/eks/dm-campaign-process-manager/dev" --filter-name "InfoLogFilter" --filter-pattern "INFO" --metric-transformations "metricName=InfoLogCount,metricNamespace=UccDmApp,metricValue=1"

aws logs describe-metric-filters --log-group-name "/ucc/eks/dm-campaign-process-manager/dev"

aws cloudwatch put-metric-alarm --alarm-name "InfoLogAlarm" --alarm-description "Alarm when INFO logs appear in dm-campaign-process-manager" --metric-name "InfoLogCount" --namespace "UccDmApp" --statistic Sum --period 60 --threshold 0 --comparison-operator GreaterThanThreshold --evaluation-periods 1 --treat-missing-data notBreaching --alarm-actions test-sns-topic

print(f"response metric filters: {response['metricFilters']}")

print(f"response_file value: {response_fle}")

            pod_name = msg.get("kubernetes", {}).get("containerName") or msg.get("containerName") or msg.get("pod") or "N/A"
            namespace = msg.get("kubernetes", {}).get("containerNamespace") or msg.get("containerNamespace") or msg.get("namespace") or "N/A"


    for event in events:
        log_stream_name = event['logStreamName']
        raw_message = event['message']
        pod_name, namespace = "N/A", "N/A"
try:
    msg = json.loads(raw_message)

    pod_name = (
        msg.get("kubernetes", {}).get("containerName")
        or msg.get("containerName")
        or msg.get("env", {}).get("containerName")
        or msg.get("pod")
        or "N/A"
    )

    namespace = (
        msg.get("kubernetes", {}).get("containerNamespace")
        or msg.get("containerNamespace")
        or msg.get("env", {}).get("containerNamespace")
        or msg.get("namespace")
        or "N/A"
    )
except Exception:
    msg = raw_message
    pod_match = re.search(r'pod[=: ]+([\w-]+)', raw_message)
    ns_match = re.search(r'namespace[=: ]+([\w-]+)', raw_message)
    if pod_match:
        pod_name = pod_match.group(1)
    if ns_match:
        namespace = ns_match.group(1)
