aws logs filter-log-events --log-group-name "/ucc/eks/dm-campaign-process-manager/dev" --filter-pattern "INFO" --limit 20

aws logs put-metric-filter --log-group-name "/ucc/eks/dm-campaign-process-manager/dev" --filter-name "InfoLogFilter" --filter-pattern "INFO" --metric-transformations "metricName=InfoLogCount,metricNamespace=UccDmApp,metricValue=1"

aws logs describe-metric-filters --log-group-name "/ucc/eks/dm-campaign-process-manager/dev"

aws cloudwatch put-metric-alarm --alarm-name "InfoLogAlarm" --alarm-description "Alarm when INFO logs appear in dm-campaign-process-manager" --metric-name "InfoLogCount" --namespace "UccDmApp" --statistic Sum --period 60 --threshold 0 --comparison-operator GreaterThanThreshold --evaluation-periods 1 --treat-missing-data notBreaching --alarm-actions test-sns-topic


def prepare_email_content_for_error_logs(response, message, log_group_name):
    events = response['events']
    subject = f"Details for Alarm - {message['AlarmName']}"
    alarm_table_html = get_alarm_table(message)

    console_url = f"https://{region}.console.aws.amazon.com/cloudwatch/home?region={region}#logsV2:log-groups/log-group/{log_group_name.replace('/', '$252F')}"

    style = "<style> pre {color: red;font-family: arial, sans-serif;font-size: 11px;} </style>"
    log_data = '<br/><b><u>Log Details (Consolidated):</u></b><br/><br/>' + style

    # collect all messages together
    consolidated_logs = []
    for event in events:
        try:
            msg = json.loads(event['message'])
            consolidated_logs.append(msg)
        except json.JSONDecodeError:
            consolidated_logs.append(event['message'])

    # pretty-print as one block
    pretty_logs = json.dumps(consolidated_logs, indent=4, ensure_ascii=False)
    log_data += f'<pre>{html.escape(pretty_logs)}</pre>'

    # Final email body
    text = alarm_table_html + log_data
    text += f"<br><br><u><b>Source Identifier:</b></u> {log_stream}"

    send_email(subject, text)
    print("Email Sent.")

