aws logs filter-log-events --log-group-name "/ucc/eks/dm-campaign-process-manager/dev" --filter-pattern "INFO" --limit 20

aws logs put-metric-filter --log-group-name "/ucc/eks/dm-campaign-process-manager/dev" --filter-name "InfoLogFilter" --filter-pattern "INFO" --metric-transformations "metricName=InfoLogCount,metricNamespace=UccDmApp,metricValue=1"

aws logs describe-metric-filters --log-group-name "/ucc/eks/dm-campaign-process-manager/dev"

aws cloudwatch put-metric-alarm --alarm-name "InfoLogAlarm" --alarm-description "Alarm when INFO logs appear in dm-campaign-process-manager" --metric-name "InfoLogCount" --namespace "UccDmApp" --statistic Sum --period 60 --threshold 0 --comparison-operator GreaterThanThreshold --evaluation-periods 1 --treat-missing-data notBreaching --alarm-actions test-sns-topic


def prepare_email_content_for_error_logs(response, message, log_group_name):
    events = response.get('events', [])
    subject = f"Details for Alarm {message['AlarmName']}"
    alarm_table_html = get_alarm_table(message)
    aws_region = os.environ.get('AWS_REGION', 'us-east-1')
    console_url = f'https://{aws_region}.console.aws.amazon.com/cloudwatch/home?region={aws_region}#logsV2:log-groups/log-group/{log_group_name.replace("/", "$252F")}'
    style = "<style> pre {color: red; font-family: arial, sans-serif; font-size: 11px;} </style>"
    log_data = f'<br/><b><u>Log Details:</u></b><br/><br/>{style}'
    for event in events:
        log_stream_name = event['logStreamName']
        raw_message = event['message']
        pod_name, namespace = "N/A", "N/A"
        try:
            namespace = raw_message[containerNamespace]
            pod_name  = raw_message[containerName]
            print(f"pod_name: {pod_name}, namespace: {namespace}")
        except Exception:
            msg = raw_message
            pod_match = re.search(r'pod[=: ]+([\w-]+)', raw_message)
            ns_match = re.search(r'namespace[=: ]+([\w-]+)', raw_message)
            if pod_match:
                pod_name = pod_match.group(1)
            if ns_match:
                namespace = ns_match.group(1)
        log_data += f'<pre><b>Log Group</b>: <a href="{console_url}/log-events/{log_stream_name}">{log_group_name}</a></pre>'
        log_data += f'<pre><b>Log Stream:</b> {log_stream_name}</pre>'
        log_data += f'<pre><b>K8s Namespace:</b> {namespace}</pre>'
        log_data += f'<pre><b>K8s Pod: </b> {pod_name}</pre>'
        log_data += f'<pre><b>Log Event:</b> {json.dumps(msg, indent=4) if isinstance(msg, dict) else msg}</pre><br/>'

        # Call API for pod restart
        if pod_name != "N/A" and namespace != "N/A":
            print(f"Calling API for pod: {pod_name}, namespace: {namespace}")
            api_call(namespace, pod_name)

    send_email(subject, alarm_table_html + log_data)
